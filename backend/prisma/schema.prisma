generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id                String                    @id @default(cuid())
  email             String                    @unique
  password          String
  createdAt         DateTime                  @default(now())
  displayName       String?
  walletAccountId   String?                   @unique
  nodes             Node[]                    @relation("UserNodes")
  payments          Payment[]                 @relation("UserPayments")
  workflowInstances PrivateWorkflowInstance[] @relation("UserPrivateWorkflowInstances")
  reviews           Review[]                  @relation("UserReviews")
  tools             Tool[]                    @relation("UserTools")
  workflows         Workflow[]                @relation("UserWorkflows")
}

model Tool {
  id                 String     @id @default(cuid())
  name               String
  description        String?
  dockerImageUrl     String
  ownerWallet        String
  priceMode          PriceMode  @default(FIXED)
  fixedPrice         Float      @default(0)
  dynamicInputCoeff  Float      @default(0)
  dynamicOutputCoeff Float      @default(0)
  rating             Float?     @default(0)
  usageCount         Int        @default(0)
  energyBaseline     Float?
  inputShape         String     @default("Not specified")
  outputShape        String     @default("Not specified")
  requiredEnv        String[]   @default([])
  status             ToolStatus @default(TESTING)
  usagePrice         Float      @default(0)
  reviews            Review[]
  tasks              Task[]
  owner              User       @relation("UserTools", fields: [ownerWallet], references: [walletAccountId])
}

model PrivateToolInstance {
  id        String   @id @default(cuid())
  userId    String
  toolId    String
  envCipher String
  createdAt DateTime @default(now())
  usageUrl  String?
}

model OneTimeToken {
  id        String   @id @default(cuid())
  jti       String   @unique
  taskId    String
  nodeId    String
  expiresAt DateTime
  used      Boolean  @default(false)
}

model Node {
  id             String     @id @default(cuid())
  ownerUserId    String
  publicKey      String
  status         NodeStatus @default(OFFLINE)
  capabilities   Json?
  reputation     Float      @default(1.0)
  minPricePerSec Float?
  url            String
  lastSeenAt     DateTime?
  owner          User       @relation("UserNodes", fields: [ownerUserId], references: [id])
  tasks          Task[]
}

model Workflow {
  id                      String                    @id @default(cuid())
  name                    String                    @default("random workflow")
  description             String?                   @default("Not specified")
  ownerUserId             String
  graphJson               Json
  fixedUsageFee           Float                     @default(0)
  estimatedCost           Float?
  energyEstimate          Float?
  createdAt               DateTime                  @default(now())
  usageUrl                String?
  workflowStatus          ToolStatus                @default(TESTING)
  PrivateWorkflowInstance PrivateWorkflowInstance[]
  tasks                   Task[]
  owner                   User                      @relation("UserWorkflows", fields: [ownerUserId], references: [id])
  @@unique([ownerUserId, name])
}

model PrivateWorkflowInstance {
  id          String    @id @default(cuid())
  graphJson   Json
  ownerUserId String
  usageUrl    String?
  createdAt   DateTime  @default(now())
  workflowId  String?
  owner       User      @relation("UserPrivateWorkflowInstances", fields: [ownerUserId], references: [id])
  Workflow    Workflow? @relation(fields: [workflowId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Task {
  id         String     @id @default(cuid())
  workflowId String
  toolId     String
  nodeId     String?
  status     TaskStatus @default(PENDING)
  resultHash String?
  txHash     String?
  energyUsed Float?
  runtimeMs  Int?
  payment    Payment?
  node       Node?      @relation(fields: [nodeId], references: [id])
  tool       Tool       @relation(fields: [toolId], references: [id])
  workflow   Workflow   @relation(fields: [workflowId], references: [id])
}

model Payment {
  id       String        @id @default(cuid())
  taskId   String?       @unique
  payer    String
  amount   Float
  status   PaymentStatus @default(PENDING)
  txHash   String?
  receiver String?
  type     PaymentType   @default(EXECUTION)
  user     User          @relation("UserPayments", fields: [payer], references: [walletAccountId])
  task     Task?         @relation(fields: [taskId], references: [id])
}

model Review {
  id      String  @id @default(cuid())
  toolId  String
  userId  String
  stars   Int
  comment String?
  tool    Tool    @relation(fields: [toolId], references: [id])
  user    User    @relation("UserReviews", fields: [userId], references: [id])
}

enum NodeStatus {
  ONLINE
  OFFLINE
  BUSY
  ERROR
}

enum TaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ToolStatus {
  TESTING
  DEPLOYED
}

enum PaymentType {
  EXECUTION
  WORKFLOW_FEE
  TOOL_LICENSE
}

enum PriceMode {
  FIXED
  DYNAMIC
  HYBRID
}
